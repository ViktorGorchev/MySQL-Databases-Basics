////////////////

Viktor_Gorchev

///////////////


-- Section 1: Data Definition

CREATE TABLE flights(
  flight_id INT NOT NULL PRIMARY KEY,
  departure_time DATETIME NOT NULL ,
  arrival_time DATETIME NOT NULL ,
  status VARCHAR(9) NOT NULL CHECK ("Departing" OR "Delayed" OR "Arrived" OR "Cancelled"),
  origin_airport_id INT NOT NULL ,
  destination_airport_id INT NOT NULL ,
  airline_id INT NOT NULL ,
  CONSTRAINT fk_flights_airports_origin FOREIGN KEY (origin_airport_id) REFERENCES airports(airport_id),
  CONSTRAINT fk_flights_airports_destination FOREIGN KEY (destination_airport_id) REFERENCES airports(airport_id),
  CONSTRAINT fk_flights_airlines FOREIGN KEY (airline_id) REFERENCES airlines(airline_id)
);

CREATE TABLE tickets(
  ticket_id INT PRIMARY KEY ,
  price DECIMAL(8,2) NOT NULL ,
  class VARCHAR(6) NOT NULL CHECK ("First" OR "Second" OR "Third"),
  seat VARCHAR(5) NOT NULL ,
  customer_id INT NOT NULL ,
  flight_id INT NOT NULL ,
  CONSTRAINT fk_tickets_customers FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
  CONSTRAINT fk_tickets_flights FOREIGN KEY (flight_id) REFERENCES flights(flight_id)
);

///////////////////////////////////////////////////////////////////////////////////
-- 2.1 Database Manipulations

INSERT INTO flights
(flight_id, departure_time, arrival_time, status, origin_airport_id, destination_airport_id, airline_id) VALUES
  (1,	STR_TO_DATE( '2016-10-13 06:00 AM', '%Y-%m-%d %l:%i %p' ),	STR_TO_DATE( '2016-10-13 10:00 AM', '%Y-%m-%d %l:%i %p' ),	"Delayed",	1,	4,	1),
(2,	STR_TO_DATE( '2016-10-12 12:00 PM', '%Y-%m-%d %l:%i %p' ),	STR_TO_DATE( '2016-10-12 12:01 PM', '%Y-%m-%d %l:%i %p' ),	"Departing",	1,	3,	2),
(3,	STR_TO_DATE( '2016-10-14 03:00 PM', '%Y-%m-%d %l:%i %p' ),	STR_TO_DATE( '2016-10-20 04:00 AM', '%Y-%m-%d %l:%i %p' ),	"Delayed",	4,	2,	4),
(4,	STR_TO_DATE( '2016-10-12 01:24 PM', '%Y-%m-%d %l:%i %p' ),	STR_TO_DATE( '2016-10-12 4:31 PM', '%Y-%m-%d %l:%i %p' ),	"Departing",	3,	1,	3),
(5,	STR_TO_DATE( '2016-10-12 08:11 AM', '%Y-%m-%d %l:%i %p' ),	STR_TO_DATE( '2016-10-12 11:22 PM', '%Y-%m-%d %l:%i %p' ),	"Departing",	4,	1,	1),
(6,	STR_TO_DATE( '1995-06-21 12:30 PM', '%Y-%m-%d %l:%i %p' ),	STR_TO_DATE( '1995-06-22 08:30 PM', '%Y-%m-%d %l:%i %p' ),	"Arrived",	2,	3,	5),
(7,	STR_TO_DATE( '2016-10-12 11:34 PM', '%Y-%m-%d %l:%i %p' ),	STR_TO_DATE( '2016-10-13 03:00 AM', '%Y-%m-%d %l:%i %p' ),	"Departing",	2,	4,	2),
(8,	STR_TO_DATE( '2016-11-11 01:00 PM', '%Y-%m-%d %l:%i %p' ),	STR_TO_DATE( '2016-11-12 10:00 PM', '%Y-%m-%d %l:%i %p' ),	"Delayed",	4,	3,	1),
(9,	STR_TO_DATE( '2015-10-01 12:00 PM', '%Y-%m-%d %l:%i %p' ),	STR_TO_DATE( '2015-12-01 01:00 AM', '%Y-%m-%d %l:%i %p' ),	"Arrived",	1,	2,	1),
(10,	STR_TO_DATE( '2016-10-12 07:30 PM', '%Y-%m-%d %l:%i %p' ),	STR_TO_DATE( '2016-10-13 12:30 PM', '%Y-%m-%d %l:%i %p' ),	"Departing",	2,	1,	7);

INSERT INTO tickets (ticket_id, price, class, seat, customer_id, flight_id) VALUES
  (1,	3000.00,	"First",	"233-A",	3,	8),
(2,	1799.90,	"Second",	"123-D",	1,	1),
(3,	1200.50,	"Second",	"12-Z",	2,	5),
(4,	410.68,	"Third",	"45-Q",	2,	8),
(5,	560.00,	"Third",	"201-R",	4,	6),
(6,	2100.00,	"Second",	"13-T",	1,	9),
(7,	5500.00,	"First",	"98-O",	2,	7)

//////////////////////////////////////////////////////////////////////////////////
-- 2.2 Database Manipulations

UPDATE flights
SET airline_id := 1
WHERE flights.status = "Arrived";

////////////////////////////////////////////////////////////////////////////////////////////
-- 2.3 Database Manipulations !!!!!!!!!!!!!!!!!!!!!!!JUDGE 

-- Variant 2 !!!!!!!!!!!!!!!!!

CREATE TABLE  temp_table(
  ticket_id INT
);

INSERT INTO temp_table (ticket_id)
SELECT t.ticket_id FROM airlines AS a
LEFT JOIN flights AS f
  ON a.airline_id = f.airline_id
LEFT JOIN tickets AS t
  ON f.flight_id = t.flight_id
WHERE a.rating = (SELECT MAX(ar.rating) FROM airlines AS ar);

UPDATE tickets
SET price := price * 1.5
WHERE ticket_id IN (SELECT ticket_id FROM temp_table)


-- Variant 1 !!!!!!!!!!!!!!!!!!!!!!!!

UPDATE tickets AS t
SET t.price := t.price * 1.5
WHERE ticket_id IN (SELECT t.ticket_id FROM airlines AS a
                    LEFT JOIN flights AS f
                      ON a.airline_id = f.airline_id
                    LEFT JOIN tickets AS t
                      ON f.flight_id = t.flight_id
                    WHERE a.rating = (SELECT MAX(ar.rating) FROM airlines AS ar));


///////////////////////////////////////////////////////////////////////////////////////////////////
-- 2.4 Database Manipulations   !!!!!!!!!!!!!!!!!!!!!!!JUDGE 

CREATE TABLE customer_reviews(
  review_id INT NOT NULL  PRIMARY KEY ,
  review_content VARCHAR(255) NOT NULL ,
  review_grade INT NOT NULL ,
  airline_id INT NOT NULL ,
  customer_id INT NOT NULL ,
  CONSTRAINT ck_review_grade CHECK (review_grade BETWEEN 1 AND 10),
  CONSTRAINT fk_customer_reviews_airlines FOREIGN KEY (airline_id) REFERENCES airlines(airline_id),
  CONSTRAINT fk_customer_reviews_customers FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

CREATE TABLE customer_bank_accounts(
  account_id INT NOT NULL PRIMARY KEY ,
  account_number VARCHAR(10) NOT NULL UNIQUE ,
  balance DECIMAL(10,2) NOT NULL ,
  customer_id INT NOT NULL ,
  CONSTRAINT fk_customer_bank_accounts_customers FOREIGN KEY (customer_id) REFERENCES customers(customer_id)  

);

/////////////////////////////////////////////////////////////////////
-- 2.5 Database Manipulations   !!!!!!!!!!!!!!!!!!!!!!!JUDGE

INSERT INTO customer_reviews (review_id, review_content, review_grade, airline_id, customer_id) VALUES
  (1,	"Me is very happy. Me likey this airline. Me good.",	10,	1,	1),
  (2,	"Ja, Ja, Ja... Ja, Gut, Gut, Ja Gut! Sehr Gut!",	10,	1,	4),
  (3,	"Meh...",	5,	4,	3),
  (4,	"Well Ive seen better, but Ive certainly seen a lot worse...",	7,	3,	5);

INSERT INTO customer_bank_accounts (account_id, account_number, balance, customer_id) VALUES
  (1,	"123456790",	2569.23,	1),
  (2,	"18ABC23672",	14004568.23,	2),
  (3,	"F0RG0100N3",	19345.20,	5);
  
/////////////////////////////////////////////////////////////////////////
-- 3.1 Querying    !!!!!!!!!!!!!!!!!!!!!!!JUDGE

SELECT
  t.ticket_id,
  t.price,
  t.class,
  t.seat
FROM tickets AS t
ORDER BY t.ticket_id ASC;

////////////////////////////////////////////////////////////////////////////
-- 3.2 Querying  !!!!!!!!!!!!!!!!!!!!!!!JUDGE

SELECT
  c.customer_id,
  CONCAT(c.first_name, " ", c.last_name) AS full_name,
  c.gender
FROM customers AS c
ORDER BY
  full_name ASC,
  c.customer_id ASC
  
///////////////////////////////////////////////////////////////////////////////////
-- 3.3 Querying !!!!!!!!!!!!!!!!!!!!!!!JUDGE

SELECT
  f.flight_id,
  f.departure_time,
  f.arrival_time
FROM flights AS f
WHERE f.status = "Delayed"
ORDER BY f.flight_id ASC

///////////////////////////////////////////////////////////////////////////////////
-- 3.4 Querying   !!!!!!!!!!!!!!!!!!!!!!!JUDGE

SELECT
  a.airline_id,
  a.airline_name,
  a.nationality,
  a.rating
FROM airlines AS a
WHERE a.airline_id IN (SELECT DISTINCT f.airline_id FROM flights AS f)
ORDER BY
  a.rating DESC,
  a.airline_id ASC
LIMIT 5

///////////////////////////////////////////////////////////////////////////////////////
-- 3.5 Querying !!!!!!!!!!!!!!!!!!!!!!!JUDGE

SELECT
  t.ticket_id,
  a.airport_name AS destination,
  CONCAT(c.first_name, " ", c.last_name) AS customer_name
FROM tickets AS t
LEFT JOIN customers AS c
  ON t.customer_id = c.customer_id
LEFT JOIN flights AS f
  ON t.flight_id = f.flight_id
LEFT JOIN airports AS a
  ON f.destination_airport_id = a.airport_id
WHERE t.price < 5000 AND t.class = "First"
ORDER BY t.ticket_id ASC

/////////////////////////////////////////////////////////////////
-- 3.6 Querying !!!!!!!!!!!!!!!!!!!!!!!JUDGE

SELECT
  c.customer_id,
  CONCAT(c.first_name, " ", c.last_name) AS full_name,
  t.town_name AS home_town
FROM tickets AS tic
INNER JOIN flights AS f
  ON tic.flight_id = f.flight_id
INNER JOIN airports AS a
  ON f.destination_airport_id = a.airport_id
INNER JOIN towns AS t
  ON a.town_id = t.town_id
INNER JOIN customers AS c
  ON tic.customer_id = c.customer_id
WHERE a.town_id = c.home_town_id
ORDER BY c.customer_id ASC

//////////////////////////////////////////////////////////////////////////
-- 3.7 Querying !!!!!!!!!!!!!!!!!!!!!!!JUDGE

SELECT
  c.customer_id,
  CONCAT(c.first_name, " ", c.last_name) AS full_name,
  "2016" - YEAR(c.date_of_birth) AS age
FROM tickets AS t
LEFT JOIN customers AS c
  ON t.customer_id = c.customer_id
LEFT JOIN flights AS f
  ON t.flight_id = f.flight_id
WHERE f.status = "Departing"
GROUP BY c.customer_id
ORDER BY
  age ASC,
  c.customer_id ASC
  
////////////////////////////////////////////////////////////////////////////////
-- 3.8 Querying !!!!!!!!!!!!!!!!!!!!!!!JUDGE

SELECT
  c.customer_id,
  CONCAT(c.first_name, " ", c.last_name) AS full_name,
  t.price AS ticket_price,
  a.airport_name
FROM tickets AS t
INNER JOIN customers AS c
  ON t.customer_id = c.customer_id
INNER JOIN flights AS f
  ON t.flight_id = f.flight_id
INNER JOIN airports AS a
  ON f.destination_airport_id = a.airport_id
WHERE f.status = "Delayed"
GROUP BY c.customer_id
ORDER BY
  t.price DESC,
  c.customer_id ASC
LIMIT 3

//////////////////////////////////////////////////////////////////////////////////////////////////
-- 3.9 Querying !!!!!!!!!!!!!!!!!!!!!!!JUDGE

SELECT
  f.flight_id,
  f.departure_time,
  f.arrival_time,
  ao.airport_name AS origin,
  ad.airport_name AS destination
FROM flights AS f
INNER JOIN airports AS ao
  ON f.origin_airport_id = ao.airport_id
INNER JOIN airports AS ad
  ON f.destination_airport_id = ad.airport_id
WHERE f.status = "Departing"
ORDER BY
  f.departure_time ASC,
  f.airline_id ASC
LIMIT 5

/////////////////////////////////////////////////////////////////////////////////////////
-- 3.10 Querying !!!!!!!!!!!!!!!!!!!!!!!JUDGE

SELECT
  c.customer_id,
  CONCAT(c.first_name, " ", c.last_name) AS full_name,
  "2016" - YEAR(c.date_of_birth) AS age
FROM tickets AS t
INNER JOIN customers AS c
  ON t.customer_id = c.customer_id
INNER JOIN flights AS f
  ON t.flight_id = f.flight_id
WHERE "2016" - YEAR(c.date_of_birth) < 21 AND f.status = "Arrived"
GROUP BY c.customer_id
ORDER BY
  age DESC,
  c.customer_id ASC
  
////////////////////////////////////////////////////////////////////////////////////////////
-- 3.11 Querying !!!!!!!!!!!!!!!!!!!!!!!JUDGE

SELECT
  ao.airport_id,
  ao.airport_name,
  COUNT(t.ticket_id) AS passengers
FROM tickets AS t
INNER JOIN flights AS f
  ON t.flight_id = f.flight_id
INNER JOIN airports AS ao
  ON f.origin_airport_id = ao.airport_id
INNER JOIN customers AS c
  ON t.customer_id = c.customer_id
WHERE f.status = "Departing"
GROUP BY t.flight_id
ORDER BY
  ao.airport_id ASC
  
//////////////////////////////////////////////////////////////////////////////
-- 4.1 Programmability   !!!!!!!!!!!!!!!!!!!!!!!JUDGE

CREATE PROCEDURE usp_submit_review
  (customer_id INT,	review_content VARCHAR(255),	review_grade INT, airline_name VARCHAR(255))
  BEGIN
    DECLARE airline_id INT;
    DECLARE review_id INT;
    SET airline_id := (SELECT a.airline_id FROM airlines AS a
                      WHERE a.airline_name = airline_name
                      LIMIT 1);
    SET review_id := (SELECT COUNT(*) FROM customer_reviews) + 1;

    IF(airline_id IS NULL) THEN
      SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Airline does not exist.';
    ELSE
      INSERT INTO customer_reviews (review_id, review_content, review_grade, airline_id, customer_id) VALUES
        (review_id, review_content, review_grade, airline_id, customer_id);
    END IF;

  END 
  
 ////////////////////////////////////////////////////////////////////////////////////////////
 -- 4.2 Programmability   !!!!!!!!!!!!!!!!!!!!!!!JUDGE
 
 CREATE PROCEDURE usp_purchase_ticket
  (customer_id INT,	flight_id INT, ticket_price DECIMAL(8,2), class VARCHAR(6), seat VARCHAR(5))
  BEGIN

    DECLARE ticket_id INT;
    SET ticket_id := (SELECT COUNT(*) FROM tickets) + 1;

    IF (ticket_price > (SELECT cb.balance FROM customer_bank_accounts AS cb
        WHERE cb.customer_id = 1
        LIMIT 1)) THEN

        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Insufficient bank account balance for ticket purchase.';
    ELSE

      INSERT INTO tickets (ticket_id, price, class, seat, customer_id, flight_id) VALUES
        (ticket_id, ticket_price, class, seat, customer_id, flight_id);

      UPDATE customer_bank_accounts
        SET balance := balance - ticket_price
      WHERE customer_id = customer_id;

    END IF;

  END
  
 //////////////////////////////////////////////////////////////
 -- 5 (BONUS): Update Trigger
 
 CREATE TRIGGER tr_update_flights
  AFTER UPDATE
  ON flights
  FOR EACH ROW
  BEGIN
    DECLARE amount_of_passengers INT;
    SET amount_of_passengers := (SELECT COUNT(*) FROM tickets AS t WHERE t.flight_id = old.flight_id);

    IF(new.status = "Arrived" ) THEN
      INSERT INTO arrived_flights (flight_id, arrival_time, origin, destination, passengers) VALUES
        (old.flight_id, old.arrival_time, old.origin_airport_id, old.destination_airport_id, amount_of_passengers);

    END IF;

  END
 