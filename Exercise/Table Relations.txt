-- 1

CREATE TABLE passports(
  passport INT NOT NULL,
  passport_number VARCHAR(50) NOT NULL
);

CREATE TABLE persons(
  person_id INT NOT NULL,
  first_name VARCHAR(50) NOT NULL,
  salary DECIMAL(19, 2),
  passport_id INT NOT NULL
);

ALTER TABLE passports
ADD PRIMARY KEY (passport);

ALTER TABLE persons
ADD PRIMARY KEY (person_id),
ADD CONSTRAINT fk_persons_passports FOREIGN KEY (passport_id)
REFERENCES passports(passport);

INSERT INTO passports (passport, passport_number) VALUES
  (101,	"N34FG21B"),
  (102,	"K65LO4R7"),
  (103,	"ZE657QP2");

INSERT  INTO persons (person_id, first_name, salary, passport_id) VALUES
  (1,	"Roberto", 43300.00,	102),
  (2,	"Tom", 56100.00, 103),
  (3,	"Yana",	60200.00,	101)

//////////////////////////////////////////////////////////////////////////////////
-- 2

CREATE TABLE manufacturers(
  manufacturer_id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(50) NOT NULL,
  established_on DATETIME
);

CREATE TABLE models(
  model_id INT NOT NULL PRIMARY KEY,
  name VARCHAR(50) NOT NULL,
  manufacturer_id INT NOT NULL,
  CONSTRAINT fk_models_manufacturers FOREIGN KEY (manufacturer_id)
    REFERENCES manufacturers(manufacturer_id)
);

INSERT INTO manufacturers (name, established_on) VALUES
  ("BMW",	"1916-03-07"),
  ("Tesla",	"2003-01-01"),
  ("Lada",	"1966-05-01");

INSERT INTO models (model_id, name, manufacturer_id) VALUES
  (101,	"X1",	1),
  (102,	"i6",	1),
  (103,	"Model S",	2),
  (104,	"Model X",	2),
  (105,	"Model 3",	2),
  (106,	"Nova",	3)
  
////////////////////////////////////////////////////////////////////////////////////
-- 3

CREATE TABLE students(
  student_id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(50) NOT NULL
);

CREATE TABLE exams(
  exam_id INT PRIMARY KEY,
  name VARCHAR(50)
);

CREATE TABLE students_exams(
  student_id INT NOT NULL,
  exam_id INT NOT NULL,
  CONSTRAINT pk_students_exams PRIMARY KEY(student_id, exam_id),
  CONSTRAINT fk_students_exams_students FOREIGN KEY (student_id)
    REFERENCES students(student_id),
  CONSTRAINT fk_students_exams_exames FOREIGN KEY (exam_id)
    REFERENCES exams(exam_id)
);

INSERT INTO students (name)
  VALUES ("Mila"), ("Toni"), ("Ron");

INSERT INTO exams (exam_id, name) VALUES
  (101,	"Spring MVC"),
  (102,	"Neo4j"),
  (103,	"Oracle 11g");

INSERT INTO students_exams (student_id, exam_id) VALUES
  (1,	101),
  (1,	102),
  (2,	101),
  (3,	103),
  (2,	102),
  (2,	103)

///////////////////////////////////////////////////////////////////////////////////
-- 4

CREATE TABLE teachers(
  teacher_id INT PRIMARY KEY,
  name VARCHAR(50) NOT NULL,
  manager_id INT,
  CONSTRAINT fk_teachers_teachers FOREIGN KEY (manager_id)
    REFERENCES teachers(teacher_id)
);

INSERT INTO teachers (teacher_id, name, manager_id) VALUES
  (101,	"John", NULL),
  (106,	"Greta",	101),
  (102,	"Maya",	106),
  (103,	"Silvia",	106),
  (105,	"Mark",	101),
  (104,	"Ted",	105)
  
////////////////////////////////////////////////////////////////////////////////////
-- 5

CREATE TABLE cities(
  city_id INT PRIMARY KEY,
  name VARCHAR(50)
);

CREATE TABLE customers(
  customer_id INT PRIMARY KEY,
  name VARCHAR(50),
  birthday DATE,
  city_id INT,
  CONSTRAINT  fk_customers_cities FOREIGN KEY (city_id)
    REFERENCES cities(city_id)
);

CREATE TABLE orders(
  order_id INT PRIMARY KEY,
  customer_id INT,
  CONSTRAINT fk_orders_customers FOREIGN KEY (customer_id)
    REFERENCES customers(customer_id)
);

CREATE TABLE item_types(
  item_type_id INT PRIMARY KEY,
  name VARCHAR(50)
);

CREATE TABLE items(
  item_id INT PRIMARY KEY,
  name VARCHAR(50),
  item_type_id INT,
  CONSTRAINT fk_items_items_types FOREIGN KEY (item_type_id)
    REFERENCES item_types(item_type_id)
);

CREATE TABLE order_items(
  order_id INT,
  item_id INT,
  CONSTRAINT pk_order_items PRIMARY KEY (order_id, item_id),
  CONSTRAINT fk_order_items_orders FOREIGN KEY (order_id)
    REFERENCES orders(order_id),
  CONSTRAINT fk_order_items_items FOREIGN KEY (item_id)
    REFERENCES items(item_id)
)

////////////////////////////////////////////////////////////////////////////////////
-- 6

CREATE TABLE majors(
  major_id INT PRIMARY KEY,
  mame VARCHAR(50)
);

CREATE TABLE students(
  student_id INT PRIMARY KEY,
  student_number VARCHAR(12),
  student_name VARCHAR(50),
  major_id INT NOT NULL,
  CONSTRAINT fk_students_majors FOREIGN KEY (major_id)
    REFERENCES majors(major_id)
);

CREATE TABLE payments(
  payment_id INT PRIMARY KEY,
  payment_date DATE,
  payment_amount DECIMAL(8,2),
  student_id INT NOT NULL,
  CONSTRAINT fk_payments_students FOREIGN KEY (student_id)
    REFERENCES students(student_id)
);

CREATE TABLE subjects(
  subject_id INT PRIMARY KEY,
  subject_name VARCHAR(50)
);

CREATE TABLE agenda(
  student_id INT,
  subject_id INT,
  CONSTRAINT pk_agenda PRIMARY KEY (student_id, subject_id),
  CONSTRAINT fk_agenda_students FOREIGN KEY (student_id)
    REFERENCES students(student_id),
  CONSTRAINT fk_agenda_subjects FOREIGN KEY (subject_id)
    REFERENCES subjects(subject_id)
)

////////////////////////////////////////////////////////////////////////////////////////
-- 9

SELECT e.employee_id, e.job_title, a.address_id, a.address_text 
FROM employees AS e
INNER JOIN addresses AS a
ON e.address_id = a.address_id
LIMIT 5

//////////////////////////////////////////////////////////////////////////////////
-- 10

SELECT e.employee_id, e.first_name, e.salary, d.name AS department_name
FROM employees AS e
LEFT JOIN departments AS d
ON e.department_id = d.department_id
WHERE e.salary > 15000
ORDER BY e.department_id ASC
LIMIT 5

////////////////////////////////////////////////////////////////////////////////////////
-- 11

SELECT e.employee_id, e.first_name FROM employees as e
LEFT JOIN employees_projects AS ep
ON e.employee_id = ep.employee_id
WHERE ep.project_id IS NULL
ORDER BY e.employee_id ASC
LIMIT 3

////////////////////////////////////////////////////////////////////////////////////
-- 12

SELECT e.employee_id, e.first_name, p.name AS project_name
FROM employees as e
RIGHT JOIN employees_projects AS ep
  ON e.employee_id = ep.employee_id
LEFT JOIN projects AS p
  ON ep.project_id = p.project_id
WHERE p.start_date > TIMESTAMP ("2002-08-13")
AND p.end_date IS NULL
ORDER BY e.employee_id
LIMIT 5

/////////////////////////////////////////////////////////////////////////////////////

-- 13 ---------------------------------------

SELECT e.employee_id, e.first_name, p.name as project_name
 FROM employees as e
LEFT OUTER JOIN employees_projects as ep
ON ep.employee_id = e.employee_id
LEFT OUTER JOIN projects as p
ON p.project_id = ep.project_id
AND p.start_date < '20050101'
WHERE e.employee_id = 24

/////////////////////////////////////////////////////////////////////////////////////////
-- 14

SELECT e.employee_id, e.first_name, e.manager_id, m.first_name FROM employees AS e
INNER JOIN employees AS m
  ON e.manager_id = m.employee_id
WHERE e.manager_id IN (3, 7)
ORDER BY e.employee_id ASC

/////////////////////////////////////////////////////////////////////////////////////////
-- 15

SELECT mc.country_code, m.mountain_range, p.peak_name, p.elevation FROM mountains AS m
RIGHT JOIN mountains_countries AS mc
  ON mc.mountain_id = m.id
LEFT JOIN peaks AS p
  ON m.id = p.mountain_id
WHERE mc.country_code = "BG" AND p.elevation > 2835
ORDER BY p.elevation DESC

//////////////////////////////////////////////////////////////////////////////////////
-- 16
SELECT mc.country_code, COUNT(mc.country_code) AS mountan_ranges FROM mountains_countries AS mc
GROUP BY mc.country_code
HAVING mc.country_code IN ("BG", "US", "RU")

/////////////////////////////////////////////////////////////////////////////////////////
-- 17

SELECT c.country_name, r.river_name FROM countries AS c
LEFT JOIN countries_rivers AS cr
  ON c.country_code = cr.country_code
LEFT JOIN rivers AS r
  ON cr.river_id = r.id
WHERE c.continent_code = "AF"
ORDER BY c.country_name ASC
LIMIT 5

///////////////////////////////////////////////////////////////////////////////////////
-- 18 --------------------------------------------------


////////////////////////////////////////////////////////////////////////////////////
-- 19 

SELECT
  COUNT(c.country_code) -
  (SELECT COUNT(DISTINCT mc.country_code) FROM mountains_countries AS mc)
  AS country_code
FROM countries AS c

////////////////////////////////////////////////////////////////////////////////////
-- 20

SELECT
  c.country_name,
  p.elevation AS highest_peak_elevation,
  r.length AS longest_river_length
FROM countries AS c
LEFT JOIN mountains_countries AS mc
  ON c.country_code = mc.country_code
LEFT JOIN peaks AS p
  ON mc.mountain_id = p.mountain_id
LEFT JOIN countries_rivers AS cr
  ON c.country_code = cr.country_code
LEFT JOIN rivers AS r
  ON cr.river_id = r.id
GROUP BY c.country_name
ORDER BY
  p.elevation DESC ,
  r.length DESC,
  c.country_name ASC
LIMIT 5

///////////////////////////////////////////////////////////////////////////////////
-- 21 ---------------------------------------------------

SELECT
  part_result.country,
  part_result.highest_peak_name,
  part_result.highest_peak_elevation,
  part_result.mountain
FROM countries AS co
RIGHT JOIN
(SELECT
  c.country_name AS country,
  CASE
    WHEN p.peak_name IS NULL THEN "(no highest peak)"
    ELSE p.peak_name
  END AS highest_peak_name,
  CASE
    WHEN p.elevation IS NULL THEN 0
    WHEN c.country_name = max_elevation_values.country_name
         AND p.elevation = max_elevation_values.max_elevation
         THEN p.elevation
    END AS highest_peak_elevation,
  CASE
    WHEN m.mountain_range IS NULL THEN "(no mountain)"
    ELSE m.mountain_range
    END AS mountain
FROM countries AS c
LEFT JOIN mountains_countries AS mc
  ON c.country_code = mc.country_code
LEFT JOIN mountains AS m
  ON mc.mountain_id = m.id
LEFT JOIN peaks AS p
  ON m.id = p.mountain_id
LEFT JOIN
  (SELECT
  c.country_name,
  MAX(p.elevation) AS max_elevation
FROM countries AS c
LEFT JOIN mountains_countries AS mc
  ON c.country_code = mc.country_code
LEFT JOIN mountains AS m
  ON mc.mountain_id = m.id
LEFT JOIN peaks AS p
  ON m.id = p.mountain_id
GROUP BY country_name) AS max_elevation_values
  ON c.country_name = max_elevation_values.country_name) AS part_result
  ON co.country_name = part_result.country
WHERE part_result.highest_peak_elevation IS NOT NULL 
ORDER BY
  part_result.country ASC,
  part_result.highest_peak_name ASC
LIMIT 5



