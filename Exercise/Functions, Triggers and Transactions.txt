-- 1

CREATE PROCEDURE usp_get_employees_salary_above_35000()
  BEGIN

    SELECT e.first_name, e.last_name FROM employees AS e
    WHERE e.salary > 35000;

  END
  
////////////////////////////////////////////////////////////////////////////////
-- 2

CREATE PROCEDURE usp_get_employees_salary_above(input_salary DECIMAL(19,4))
  BEGIN
      SELECT e.first_name, e.last_name FROM employees AS e
      WHERE e.salary >= input_salary;
  END
  
//////////////////////////////////////////////////////////////////////////////////
-- 3

CREATE PROCEDURE usp_get_towns_starting_with (input VARCHAR(50))
  BEGIN

      DECLARE  like_statement VARCHAR(50);
      SET like_statement := CONCAT(input, "%");

      SELECT t.name FROM towns AS t
      WHERE t.name LIKE like_statement;
  END
  
//////////////////////////////////////////////////////////////////////////////////////
-- 4

CREATE PROCEDURE usp_get_employees_from_town (town_name VARCHAR(50))
  BEGIN

      SELECT e.first_name, e.last_name FROM employees AS e
      INNER JOIN addresses AS a
        ON  e.address_id = a.address_id
      INNER JOIN towns AS t
        ON a.town_id = t.town_id
      WHERE t.name = town_name;

  END
  
//////////////////////////////////////////////////////////////////////////////////////////////
-- 5

CREATE FUNCTION ufn_get_salary_level (salary DECIMAL(19,4))
  RETURNS VARCHAR(50)
  BEGIN
    
    IF (salary < 30000) THEN
      RETURN "Low";
    ELSEIF (salary BETWEEN 30000 AND 50000) THEN 
      RETURN "Average";
    ELSE
      RETURN "High";
    END IF;

  END
  
////////////////////////////////////////////////////////////////////////////////////////////
-- 6

CREATE PROCEDURE usp_get_employees_by_salary_level (salary_level VARCHAR(50))
  BEGIN

    IF (salary_level = "low") THEN
      SELECT e.first_name, e.last_name FROM employees AS e
      WHERE e.salary < 30000;
      END IF;

    IF (salary_level = "average") THEN
      SELECT e.first_name, e.last_name FROM employees AS e
      WHERE e.salary BETWEEN 30000 AND 50000;
    END IF;

    IF (salary_level = "high") THEN
       SELECT e.first_name, e.last_name FROM employees AS e
      WHERE e.salary > 50000;
    END IF;

  END
  
///////////////////////////////////////////////////////////////////////////////////////////
-- 7 -------------------------

CREATE FUNCTION ufn_is_word_comprised (set_of_letters VARCHAR(255), word VARCHAR(255))
  RETURNS INT

  BEGIN

    DECLARE set_of_letters_result INT;
    DECLARE current_letter VARCHAR(1);
    DECLARE current_letter_position INT;
    DECLARE word_length INT;
    SET current_letter_position := 1;
    SET word_length := CHAR_LENGTH(word);

    IF (word = "" OR set_of_letters = "") THEN
      RETURN 0;
    END IF;

    WHILE current_letter_position <= word_length DO
      SET current_letter := SUBSTRING(word, current_letter_position, 1);
      SET set_of_letters_result := LOCATE(current_letter, set_of_letters);
      IF (set_of_letters_result = 0) THEN
        RETURN 0;
      END IF;

      SET current_letter_position = current_letter_position + 1;
    END WHILE;

    RETURN 1;
  END 
  
 ///////////////////////////////////////////////////////////////////////////////////////////////////////////
 -- 8
 
 ///////////////////////////////////////////////////////////////////
 -- 9
 CREATE PROCEDURE usp_get_holders_full_name()
  BEGIN
    SELECT CONCAT(ah.first_name, " ", ah.last_name) AS full_name FROM account_holders AS ah;
  END
 
 ////////////////////////////////////////////////////////////////////////////////////////////////////////
 -- 10 --------------------------------
 
 CREATE PROCEDURE usp_get_holders_with_balance_higher_than (input_amount DECIMAL(19,4))
  BEGIN

    SELECT r.first_name, r.last_name
    FROM (SELECT
            ah.id,
            a.account_holder_id,
            ah.first_name,
            ah.last_name,
            SUM(a.balance) AS money
          FROM account_holders AS ah
          RIGHT JOIN accounts AS a
            ON ah.id = a.account_holder_id
          GROUP BY ah.id
          HAVING SUM(a.balance) > input_amount
         ) AS r;

  END
 
///////////////////////////////////////////////////////////////////////////////////////////////////////
-- 11 -----------------------------

CREATE FUNCTION ufn_calculate_future_value(sum DECIMAL(19,4), interest_rate DECIMAL(19, 4),years INT)
  RETURNS DECIMAL(19,4)
  BEGIN
      DECLARE x INT;
      DECLARE future_value DECIMAL(19,4);
      SET x := 0;
      -- SET future_value := sum * POW((1 + (interest_rate)), years);
      SET future_value := sum;

      WHILE x < years DO
        SET future_value = future_value + (future_value * interest_rate);

        SET x := x + 1;
      END WHILE;

      RETURN future_value;

  END
  
///////////////////////////////////////////////////////////////////////////////////////////////////
-- 13 -----------------------------------------------

CREATE PROCEDURE usp_deposit_money (account_id INT, money_amount DECIMAL(19, 4))
  BEGIN
    
    START TRANSACTION;

    UPDATE accounts
    SET balance := balance + money_amount
    WHERE id = account_id;

    IF(money_amount < 0) THEN
      ROLLBACK;
    ELSE
      COMMIT;
    END IF;

  END
  
 ///////////////////////////////////////////////////////////////////////////////////////////////////
 -- 14 ---------------------------------------
 
 CREATE PROCEDURE usp_withdraw_money (account_id INT, money_amount DECIMAL(19, 4))
  BEGIN
    START TRANSACTION;

    UPDATE accounts
    SET balance := balance - money_amount
    WHERE id = account_id;

    IF((SELECT a.balance FROM accounts AS a WHERE a.id = account_id) < 0) THEN
      ROLLBACK;
    ELSE
      COMMIT;
    END IF;

  END
  
 /////////////////////////////////////////////////////////////////////////////////////////////////
 -- 20
 
 SELECT p.providers AS email_provider, COUNT(p.providers) AS number_of_users
FROM (SELECT SUBSTRING_INDEX(u.email, "@", -1) AS providers FROM users AS u) AS p
GROUP BY p.providers
ORDER BY
  number_of_users DESC,
  email_provider ASC
  
/////////////////////////////////////////////////////////////////////////////////////
-- 21

SELECT
  g.name AS game,
  gt.name AS game_type,
  u.user_name,
  gs.level,
  gs.cash,
  c.name AS `character`
FROM users_games AS gs
INNER JOIN users AS u
  ON gs.user_id = u.id
INNER JOIN games AS g
  ON gs.game_id = g.id
INNER JOIN game_types AS gt
  ON g.game_type_id = gt.id
INNER JOIN characters AS c
  ON gs.character_id = c.id
ORDER BY
  gs.level DESC,
  u.user_name ASC,
  g.name ASC
  
/////////////////////////////////////////////////////////////////////////////////////////////////////
-- 22 -------------------------------------------

SELECT
  u.user_name,
  g.name AS game,
  COUNT(i.name) AS items_count,
  SUM(i.price) AS items_price
FROM users AS u
INNER JOIN users_games AS ug
  ON u.id = ug.user_id
INNER JOIN games AS g
  ON ug.game_id = g.id
INNER JOIN user_game_items AS ugi
  ON ug.id = ugi.user_game_id
INNER JOIN items AS i
  ON ugi.item_id = i.id
GROUP BY g.name
HAVING COUNT(i.name) >= 10
ORDER BY
  items_count DESC,
  items_price DESC,
  u.user_name ASC
  
 ////////////////////////////////////////////////////////////////////////////////////////////////////
 -- 23 ----
 
 //////////////////////////////////////////////////////////////////////////////////////////////////
 -- 24
 
 SELECT
  i.name,
  i.price,
  i.min_level,
  s.strength,
  s.defence,
  s.speed,
  s.luck,
  s.mind
FROM items AS i
LEFT JOIN statistics AS s
  ON i.statistics_id = s.id
WHERE s.speed > (SELECT AVG(s.speed) FROM statistics AS s)
      AND s.luck > (SELECT AVG(s.luck) FROM statistics AS s)
      AND s.mind > (SELECT AVG(s.mind) FROM statistics AS s)
ORDER BY i.name ASC

////////////////////////////////////////////////////////////////////////////////////////////////////////
-- 25 

SELECT
  i.name AS item,
  i.price,
  i.min_level,
  gt.name AS forbidden_game_type
FROM items AS i
LEFT JOIN game_type_forbidden_items AS f
  ON i.id = f.item_id
LEFT JOIN game_types AS gt
  ON f.game_type_id = gt.id
ORDER BY
  gt.name DESC,
  i.name ASC
  
 ////////////////////////////////////////////////////////////////////////////////////////////////////////////
-- 26 -------


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
-- 27

SELECT
  p.peak_name,
  m.mountain_range AS mountain,
  p.elevation
FROM peaks AS p
LEFT JOIN mountains AS m
  ON p.mountain_id = m.id
ORDER BY
  p.elevation DESC,
  p.peak_name ASC
  
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
-- 28 ------------

SELECT
  p.peak_name,
  m.mountain_range AS mountain,
  c.country_name,
  con.continent_name
FROM peaks AS p
LEFT JOIN mountains AS m
  ON p.mountain_id = m.id
LEFT JOIN mountains_countries AS mc
  ON m.id = mc.mountain_id
LEFT JOIN countries AS c
  ON mc.country_code = c.country_code
LEFT JOIN continents AS con
  ON c.continent_code = con.continent_code
ORDER BY
  p.peak_name ASC,
  c.country_name ASC

//////////////////////////////////////////////////////////////////////////////////////////
-- 29

SELECT
  c.country_name,
  con.continent_name,
  CASE
    WHEN r.river_name IS NULL THEN 0
    ELSE COUNT(r.id)
  END AS rivers_count,
  CASE
    WHEN r.length IS NULL THEN 0
    ELSE SUM(r.length)
  END AS total_length
FROM countries AS c
LEFT JOIN countries_rivers AS cr
  ON c.country_code = cr.country_code
LEFT JOIN rivers AS r
  ON cr.river_id = r.id
LEFT JOIN continents AS con
  ON c.continent_code = con.continent_code
GROUP BY c.country_name
ORDER BY
  rivers_count DESC,
  total_length DESC,
  c.country_name ASC
  
////////////////////////////////////////////////////////////////////////////////////////
-- 30 --------------------------------------

SELECT
  c.currency_code AS "CurrencyCode",
  cur.description AS "Currency",
  COUNT(c.country_name) AS "NumberOfCountries"
FROM currencies AS cur
LEFT JOIN countries AS c
  ON cur.currency_code = c.currency_code
GROUP BY c.currency_code
ORDER BY
  NumberOfCountries DESC,
  Currency ASC

 ////////////////////////////////////////////////////////////////////////////////////
-- 31 --------------------

SELECT
  con.continent_name,
  SUM(c.are_in_sq_km) AS countries_area,
  SUM(c.population) AS countries_population
FROM continents AS con
LEFT JOIN countries AS c
  ON con.continent_code = c.continent_code
GROUP BY con.continent_name
ORDER BY countries_population DESC

/////////////////////////////////////////////////////////////////////////////

-- 32

-- ALTER TABLE countries
-- ADD is_deleted bit(1) NOT NULL DEFAULT b'0';

CREATE TABLE monasteries(
  id INT AUTO_INCREMENT PRIMARY KEY ,
  name VARCHAR(255),
  country_code CHAR(3) NOT NULL,
  CONSTRAINT fk_monasteries_countries FOREIGN KEY (country_code)REFERENCES countries(country_code)
);

INSERT INTO monasteries(name, country_code) VALUES
('Rila Monastery “St. Ivan of Rila”', 'BG'),
('Bachkovo Monastery “Virgin Mary”', 'BG'),
('Troyan Monastery “Holy Mother''s Assumption”', 'BG'),
('Kopan Monastery', 'NP'),
('Thrangu Tashi Yangtse Monastery', 'NP'),
('Shechen Tennyi Dargyeling Monastery', 'NP'),
('Benchen Monastery', 'NP'),
('Southern Shaolin Monastery', 'CN'),
('Dabei Monastery', 'CN'),
('Wa Sau Toi', 'CN'),
('Lhunshigyia Monastery', 'CN'),
('Rakya Monastery', 'CN'),
('Monasteries of Meteora', 'GR'),
('The Holy Monastery of Stavronikita', 'GR'),
('Taung Kalat Monastery', 'MM'),
('Pa-Auk Forest Monastery', 'MM'),
('Taktsang Palphug Monastery', 'BT'),
('Sümela Monastery', 'TR');

UPDATE countries
    SET is_deleted := b'1'
WHERE country_code IN
                      (SELECT cr.country_code FROM countries_rivers AS cr
                        GROUP BY cr.country_code
                        HAVING COUNT(cr.river_id) > 3);

SELECT
  m.name AS monastery,
  c.country_name AS country
FROM monasteries AS m
LEFT JOIN countries AS c
  ON m.country_code = c.country_code
WHERE c.is_deleted = b'0'
ORDER BY m.name ASC

////////////////////////////////////////////////////////////////////////////////////////
-- 33

UPDATE countries
    SET country_name := "Burma"
WHERE country_name = "Myanmar";

INSERT INTO monasteries(name, country_code) VALUES
('Hanga Abbey”', (SELECT c.country_code FROM countries AS c WHERE c.country_name = "Tanzania"));

SELECT
  con.continent_name AS "ContinentName",
  c.country_name AS "CountryName",
  CASE
    WHEN m.name IS NULL THEN 0
      ELSE COUNT(c.country_name)
  END AS "MonasteriesCount"
FROM monasteries AS m
RIGHT JOIN countries AS c
  ON m.country_code = c.country_code
LEFT JOIN continents AS con
  ON c.continent_code = con.continent_code
WHERE c.is_deleted = b'0'
GROUP BY c.country_name
ORDER BY
  MonasteriesCount DESC,
  c.country_name ASC
